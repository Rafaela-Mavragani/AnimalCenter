@page "/login"
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IAuthDataService AuthDataService
@rendermode InteractiveServer
@inject HttpClient Http

<style>
    body {
        background-color: #b3e5fc;
    }
</style>

 
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your login details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">User Name</label>
                <InputText Id="email" @ref="@inputTextFocus" class="form-control" @bind-Value="loginModel.UserName" />
                <ValidationMessage For="@(() => loginModel.UserName)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="@passwordType" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <div class="form-group">
                <input id="showPassword" type="checkbox" checked="@showPassword" @oninput="@HandlePassword" />
                <label for="showPassword">Show Password</label>
            </div>
            <h6 class="warning login-error text-center" style="display: @DisplayError">@errorMessage</h6>
            <div class="w-100 text-center">
                <button type="submit" class="btn btn-primary">Log In</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginDTO loginModel = new();
    private string? message;
     
    protected string DisplayError { get; set; } = "none;";
    public bool showPassword { get; set; }
    public string? passwordType { get; set; }
    public string errorMessage { get; set; }
    protected InputText? inputTextFocus;
    string returnUrl;

    protected override void OnInitialized()
    {
        passwordType = "password";
        showPassword = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (String.IsNullOrEmpty(returnUrl))
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
            {
                returnUrl = url;
            }
        }

     
        if (firstRender && !AuthService.IsLoggedIn)
        {
            var restoredFromState = await AuthService.GetStateFromTokenAsync();
            if (restoredFromState)
            {
                if (!string.IsNullOrEmpty(returnUrl))
                {
                    NavigationManager.NavigateTo(returnUrl);
                    returnUrl = string.Empty;
                }
            }
        }
    }

    protected void HandlePassword()
    {
        if (showPassword)
        {
            passwordType = "password";
            showPassword = false;
        }
        else
        {
            passwordType = "text";
            showPassword = true;
        }
    }

    protected async Task HandleLogin()
    {
        var loginResult = AuthDataService.Login(loginModel.UserName, loginModel.Password);

        if (!loginResult.Success)
        {
            errorMessage = loginResult.Message;
            DisplayError = "block;";

            if (inputTextFocus.Element != null)
            {
                await inputTextFocus.Element.Value.FocusAsync();
            }
        }
        else
        {
            await AuthService.Login(loginResult.Data);

            if (!string.IsNullOrEmpty(returnUrl))
            {
                NavigationManager.NavigateTo(returnUrl);
                returnUrl = string.Empty;
            }
            else
            {
                NavigationManager.NavigateTo("/animal-tasks");
            }
        }

    }
}
