@page "/app-tasks"
@inject HttpClient Http
@inject IJSRuntime JS
@using AnimalCenterAPI.DTO
@rendermode InteractiveServer

<style>
    body {
        background-color: #b3e5fc;
    }
</style>

<AuthorizeView >
 <Authorized Context="adminContext">

<h3 class="mb-4">📋 App Task Management</h3>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <div class="p-3 mb-2 bg-light border rounded">
        <table class="table table-bordered table-striped">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>User</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in appTasks)
                {
                    var user = users.FirstOrDefault(u => u.Id == task.UserId);
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.Name</td>
                        <td>@task.Description</td>
                        <td>@(user != null ? $"{user.firstname} {user.lastname}" : "Unknown")</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task.Id)">🗑️ Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<hr />
<h4>Create New Task</h4>

<EditForm Model="taskModel" OnValidSubmit="SaveTask">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="p-3 mb-2 bg-info text-dark rounded">
        <div class="mb-3">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="taskModel.Name" />
        </div>

        <div class="mb-3">
            <label>Description</label>
            <InputTextArea class="form-control" @bind-Value="taskModel.Description" />
        </div>

        <div class="mb-3">
            <label>User</label>
            <InputSelect @bind-Value="taskModel.UserId" class="form-select">
                <option value="">-- Select User --</option>
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.firstname @user.lastname</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-success">Create</button>
    </div>
</EditForm>
</Authorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    private List<AppTaskDTO> appTasks = new();
    private List<UserDTO> users = new();
    private AppTaskDTO taskModel = new();
    private string? message;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = await Http.GetFromJsonAsync<List<UserDTO>>("api/users") ?? new();
        await LoadTasks();
        loading = false;
    }

    private async Task LoadTasks()
    {
        appTasks = await Http.GetFromJsonAsync<List<AppTaskDTO>>("api/apptasks") ?? new();
    }

    private async Task SaveTask()
    {
        var response = await Http.PostAsJsonAsync("api/apptasks", taskModel);

        if (response.IsSuccessStatusCode)
        {
            message = "✅ Task created.";
            taskModel = new(); // Reset form
            await LoadTasks();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            message = $"❌ Failed: {error}";
        }
    }

    private async Task DeleteTask(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Delete task #{id}?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"api/apptasks/{id}");
        if (response.IsSuccessStatusCode)
        {
            message = "✅ Task deleted.";
            await LoadTasks();
        }
        else
        {
            message = "❌ Failed to delete.";
        }
    }
}
